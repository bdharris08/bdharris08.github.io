<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Ben Harris</title>
    <link>https://bdharris08.github.io/tags/go/</link>
    <description>Recent content in go on Ben Harris</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bdharris08.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pointers in Go Composite Literals</title>
      <link>https://bdharris08.github.io/posts/go-pointer-literals/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bdharris08.github.io/posts/go-pointer-literals/</guid>
      <description>A neat trick to cleanly add pointers to composite literals Composite struct literals are one of my favorite parts of the look and feel of Go. They allow for excellent self-documenting test factories. Take the following example:
type something struct { s string } func testSomething(t *testing.T) { type testCase struct { obj something expected int } cases := []testCase{ testCase{ obj: something{ s: &amp;#34;test123&amp;#34;, }, expected: 10, }, } for _, c := range cases { res, err := someFunc(c.</description>
    </item>
    
  </channel>
</rss>