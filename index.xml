<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ben Harris</title><link>https://ben.harris.codes/</link><description>Recent content on Ben Harris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ben.harris.codes/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform Infrastructure as Code with Reusable Modules</title><link>https://ben.harris.codes/posts/terraform-modules/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/posts/terraform-modules/</guid><description>Terraform Infrastructure as Code with Reusable Modules and How it Can Improve Organization What is Infrastructure as Code? Infrastructure as Code (IAC) is a software-based approach to managing and provisioning infrastructure. It uses templates, automation, and a declarative language to describe the infrastructure components needed to run any application. IAC enables developers to manage their entire IT infrastructure in code. There are a few options to choose from depending on project requirements.</description></item><item><title>Pointers in Go Composite Literals</title><link>https://ben.harris.codes/posts/go-pointer-literals/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/posts/go-pointer-literals/</guid><description>A neat trick to cleanly add pointers to composite literals Composite struct literals are one of my favorite parts of the look and feel of Go. They allow for excellent self-documenting test factories. Take the following example:
type something struct { s string } func testSomething(t *testing.T) { type testCase struct { obj something expected int } cases := []testCase{ testCase{ obj: something{ s: &amp;#34;test123&amp;#34;, }, expected: 10, }, } for _, c := range cases { res, err := someFunc(c.</description></item><item><title>The better way to count(*)</title><link>https://ben.harris.codes/posts/best-row-count/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/posts/best-row-count/</guid><description>The better way to count(*) Have you ever wanted to know the size of a table? Typically, if you&amp;rsquo;re worried about how big it is, it&amp;rsquo;s already huge. Why not just SELECT count(*) from huge_table? That may not be the best idea, especially if your table is larger than a few hundred thousand rows. Let&amp;rsquo;s explore why that is the case in MySQL specifically.
TLDR Use ANALYZE TABLE table_name; SELECT table_rows FROM INFORMATION_SCHEMA.</description></item><item><title>Recursive Components</title><link>https://ben.harris.codes/posts/recursive-components/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/posts/recursive-components/</guid><description/></item><item><title>How to refactor your huge Node file</title><link>https://ben.harris.codes/posts/refactor-huge-node-file/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/posts/refactor-huge-node-file/</guid><description/></item><item><title>About Me</title><link>https://ben.harris.codes/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/about/</guid><description>I am a Senior Software Engineer and Certified Cloud Solutions Architect with over ten years of experience writing, debugging, and managing software systems at scale. From single-page applications to backend microservices, and from large-scale data ingestion to cloud infrastructure, my experience puts me in the perfect positions to help you solve your problems.
As a native Texan, I was raised in a culture of hard work and accountability. After graduating from the University of Texas at Austin, I went on to learn systems, front end, and backend software from many talented coworkers at Freescale, HP, and IBM.</description></item><item><title>Let's make it happen</title><link>https://ben.harris.codes/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ben.harris.codes/contact/</guid><description>Email me directly at ben at harris.codes Contact me today to learn more about how I can help you with:
Cloud Architecture and Engineering Backend Engineering DevOps (system administration, deployment, automation) Business process automation Professional website design and maintenance</description></item></channel></rss>